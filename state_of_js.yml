locale: de-DE
namespace: js
translations:
    ###########################################################################
    # General
    ###########################################################################

    - key: general.state_of_js.intro
      t: >
          Die JavaScript Welt könnte etwas Einstufung benötigen.

          Seit 2016 hat diese Umfrage jährlich Daten von mehr als 20 000 Entwicklern gesammelt, um die aktuellen und die kommenden Trends zu identifizieren.

          Nimm an der Umfrage teil und hilf uns herauszufinden welche Bibliotheken Entwickler als nächstes lernen möchten, welche die höchsten Zufriedenheitswerte aufweisen und vieles mehr.





    ###########################################################################
    # Sections
    ###########################################################################

    - key: sections.syntax.title
      t: Syntax
    - key: sections.syntax.description
      t: Die Grammatik von JavaScript.

    - key: sections.language.title
      t: Sprache
    - key: sections.language.description
      t: Das Vokabular von JavaScript.

    - key: sections.data_structures.title
      t: Datenstrukturen
    - key: sections.data_structures.description
      t: Wie Du Daten speicherst und bearbeitest.

    - key: sections.browser_apis.title
      t: Browser APIs
    - key: sections.browser_apis.description
      t: Funktionen, die von Browsern bereitgestellt werden.

    - key: sections.other_features.title
      t: Andere Features
    - key: sections.other_features.description
      t: Andere Technologien und Muster

    - key: sections.patterns.title
      t: Muster
    - key: sections.patterns.description
      t: Wie Du Code schreibst.

    - key: sections.javascript_flavors.title
      t: JavaScript Flavors
    - key: sections.javascript_flavors.description
      t: Sprachen, die zu JavaScript übersetzen.

    - key: sections.front_end_frameworks.title
      t: Front-end Frameworks
    - key: sections.front_end_frameworks.description
      t: Frontend Frameworks und Bibliotheken

    - key: sections.datalayer.title
      t: Datenschichten
    - key: sections.datalayer.description
      t: Laden und Verwalten von Daten in Apps.

    - key: sections.back_end_frameworks.title
      t: Backend Frameworks
    - key: sections.back_end_frameworks.description
      t: JavaScript auf dem Server.

    - key: sections.testing.title
      t: Testen
    - key: sections.testing.description
      t: Werkzeuge, um den Code zu testen.

    - key: sections.mobile_desktop.title
      t: Mobile & Desktop
    - key: sections.mobile_desktop.description
      t: JavaScript für mobile Geräte und Desktop Apps.

    - key: sections.build_tools.title
      t: Build Tools
    - key: sections.build_tools.description
      t: Compiling & bundling Code

    - key: sections.tools_others.title
      t: Other Tools
    - key: sections.tools_others.description
      t: Andere JavaScript Werkzeuge

    ###########################################################################
    # Options
    ###########################################################################

    ###########################################################################
    # Features
    ###########################################################################

    # syntax
    - key: features.destructuring
      t: Destructuring
    - key: features.destructuring.description
      t: 'Beispiel: `const { foo } = bar`'
    - key: features.spread_operator
      t: Spread operator
    - key: features.spread_operator.description
      t: 'Beispiel: `[...array1, ...array2]`'
    - key: features.arrow_functions
      t: Arrow Functions
    - key: features.arrow_functions.description
      t: 'Beispiel: `const foo = () => {}`'
    - key: features.nullish_coalescing
      t: Nullish Coalescing
    - key: features.nullish_coalescing.description
      t: >
        Beispiel: `const foo = 0 ?? 42`
    - key: features.optional_chaining
      t: Optional Chaining
    - key: features.optional_chaining.description
      t: >
        Beispiel: `const dogName = adventurer.dog?.name`
    - key: features.private_fields
      t: Private Fields
    - key: features.private_fields.description
      t: >
        Beispiel: `class ClassWithPrivateField { #privateField }`

    # language
    - key: features.proxies
      t: Proxies
    - key: features.async_await
      t: Async/Await
    - key: features.promises
      t: Promises
    - key: features.decorators
      t: Decorators
    - key: features.decorators.description
      t: >
          Einfach gesagt ist ein Decorator eine simple Variante einen Codeteil in einem anderen zu umschließen - ihn buchstäblich zu "dekorieren".

    - key: features.dynamic_import
      t: Dynamic Import
    - key: features.dynamic_import.description
      t: >
        Beispiel: <code>await import('/modules/my-module.js')</code>

    # data structures
    - key: features.maps
      t: Maps
    - key: features.sets
      t: Sets
    - key: features.typed_arrays
      t: Typed Arrays
    - key: array_prototype_flat
      t: Array.prototype.flat

    # browser apis
    - key: features.service_workers
      t: Service Workers
    - key: features.local_storage
      t: LocalStorage
    - key: features.i18n
      t: i18n
    - key: features.web_components
      t: Web Components
    - key: features.web_audio
      t: Web Audio API
    - key: features.webgl
      t: WebGL
    - key: features.web_animations
      t: Web Animations API
    - key: features.webrtc
      t: WebRTC
    - key: features.web_speech
      t: Web Speech API
    - key: features.webvr
      t: WebVR
    - key: features.websocket
      t: Websocket
    - key: features.fetch
      t: Fetch API

    # other features
    - key: features.pwa
      t: Progressive Web Apps (PWA)
    - key: features.wasm
      t: WebAssembly (WASM)

    # patterns
    - key: patterns.object_oriented_programming
      t: Objektorientierte Programmierung
    - key: features.functional_programming
      t: Funktionale Programmierung
    - key: features.reactive_programming
      t: Reaktive Programmierung

    ###########################################################################
    # Tools
    ###########################################################################

    - key: tools.angular.description
      t: >
        Diese Frage zielt nur auf [Angular](https://angular.io/)-Erfahrung ab,
        und bezieht sich explizit *nicht* auf das veraltete [AngularJS](https://angularjs.org/).

    ###########################################################################
    # Other Tools
    ###########################################################################

    - key: tools_others.runtimes
      t: JavaScript Runtimes
    - key: tools_others.runtimes.description
      t: Welche Engine-/Runtime-/Execution-Umgebungen nutzt du re­gel­mä­ßig?
    - key: tools_others.runtimes.others
      t: Andere Runtimes
    - key: tools_others.runtimes.others.description
      t: Andere Antworten (Freitextfeld).

    - key: tools_others.package_registries
      t: Package Registries
    - key: tools_others.package_registries.description
      t: Welche Package Registries nutzt du re­gel­mä­ßig um Pakete zu holen?
    - key: tools_others.package_registries.others
      t: Andere Package Registries
    - key: tools_others.package_registries.others.description
      t: Andere Antworten (Freitextfeld).

    ###########################################################################
    # Opinions
    ###########################################################################

    - key: opinions.js_moving_in_right_direction
      t: JavaScript entwickelt sich in die richtige Richtung.

    - key: opinions.building_js_apps_overly_complex
      t: JavaScript Apps zu bauen ist derzeit übermäßig komplex.

    - key: opinions.js_over_used_online
      t: JavaScript wird online zu oft genutzt.

    - key: opinions.enjoy_building_js_apps
      t: Ich genieße es JavaScript-Apps zu bauen.

    - key: opinions.would_like_js_to_be_main_lang
      t: Ich würde JavaScript gerne als meine primäre Programmiersprache verwenden.

    - key: opinions.js_ecosystem_changing_to_fast
      t: Das JavaScript-Ökosystem verändert sich zu schnell.

    - key: opinions_others.missing_from_js.others
      t: Was fehlt dir an JavaScript?
    - key: opinions_others.missing_from_js.others.description
      t: Features, die du gerne in JavaScript sehen würdest.

    - key: happiness.state_of_the_web
      t: Wie zufrieden bist du allgemein mit dem Status der Web Technologien?

    - key: opinions.missing_from_js
      t: Was vermisst Du persönlich in JavaScript?
